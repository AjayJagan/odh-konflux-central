name: OKC Replicator for tekton files

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component name (used for both OKC folder and GitHub repository under DevOps-automation-tasks)'
        required: true
        type: choice
        options:
          - data-science-pipelines
          - odh-model-controller
          - kserve
          # Add all valid components here
      release_branch:
        description: 'Branch in target repo to merge PR into (e.g., rhoai-2.9)'
        required: true
        type: string
      version:
        description: 'New version identifier (e.g., v2.29.0)'
        required: true
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout OKC repository
        uses: actions/checkout@v4
        with:
          path: okc-repo

      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets._APP_ID }}
          private_key: ${{ secrets._PRIVATE_KEY }}

      - name: Set environment variables
        run: |
          echo "REPOSITORY=opendatahub-io/${{ inputs.component }}" >> $GITHUB_ENV
          echo "OKC_FOLDER=${{ inputs.component }}" >> $GITHUB_ENV

      - name: Prepare Tekton files
        run: |
          repo_folder="okc-repo/pipelines/${OKC_FOLDER}"
          echo "Using pipeline path: $repo_folder"

          if [ ! -d "$repo_folder" ]; then
            echo "ERROR: $repo_folder does not exist!"
            exit 1
          fi

          mkdir -p extracted/.tekton
          find "$repo_folder" -type f -name "*push.yaml" -exec cp {} extracted/.tekton/ \;

          if [ -z "$(ls -A extracted/.tekton)" ]; then
            echo "ERROR: No *push.yaml files found in $repo_folder"
            exit 1
          fi

          echo "Updating output-image tag and CEL target_branch to: ${{ inputs.version }} and ${{ inputs.release_branch }}"
          find extracted/.tekton/ -type f -name "*.yaml" | while read file; do
            # Update the output-image version
            sed -i -E '/name: output-image/{n; s|(value: .+:)[^[:space:]]+|\1'"${{ inputs.version }}"'|}' "$file"

            # Update the CEL target_branch value where it's set to $$TARGET_BRANCH$$
            perl -0777 -i -pe 's/(target_branch\s*==\s*")\$\$TARGET_BRANCH\$\$(")/\1'"${{ inputs.release_branch }}"'\2/g' "$file"
          done

      - name: Clone and push Tekton changes
        run: |
          git clone https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${REPOSITORY} repo-workspace
          cd repo-workspace
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ inputs.release_branch }}
          git checkout -B ${{ inputs.release_branch }} origin/${{ inputs.release_branch }}

          branch_name="appstudio-${{ inputs.component }}-konflux-replicator"
          git checkout -B "$branch_name" ${{ inputs.release_branch }}

          mkdir -p .tekton
          rsync -av --delete ../extracted/.tekton/ .tekton/
          git add .tekton

          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "commit=false" >> $GITHUB_ENV
            exit 0
          fi

          git commit -m "Update Tekton output-image tags to version ${{ inputs.version }}"
          git push --set-upstream origin "$branch_name" --force
          echo "commit=true" >> $GITHUB_ENV

      - name: Create Pull Request
        if: env.commit == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh pr create \
            --repo "${REPOSITORY}" \
            --base "${{ inputs.release_branch }}" \
            --head "appstudio-${{ inputs.component }}-konflux-replicator" \
            --title "Update Tekton files to version ${{ inputs.version }}" \
            --body "This PR updates the \`output-image\` tags and CEL expressions in \`.tekton/\` to version \`${{ inputs.version }}\` and branch \`${{ inputs.release_branch }}\`."
