name: ODH Konflux Release Onboarder

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Repository name'
        required: true
        type: choice
        options:
          - caikit-nlp
          - caikit-tgis-serving
          - codeflare-operator
          - data-science-pipelines-operator
          - data-science-pipelines
          - feast
          - fms-guardrails-orchestrator
          - guardrails-detectors
          - guardrails-regex-detector
          - ilab-on-ocp
          - kserve
          - kubeflow
          - kuberay
          - kueue
          - lm-evaluation-harness
          - ml-metadata
          - model-registry-operator
          - model-registry
          - modelmesh-runtime-adapter
          - modelmesh-serving
          - modelmesh
          - notebooks
          - opendatahub-operator
          - odh-dashboard
          - odh-model-controller
          - openvino-model-server
          - rest-proxy
          - text-generation-inference
          - training-operator
          - trustyai-explainability
          - trustyai-service-operator
          - vllm-orchestrator-gateway
          - llm-d-inference-scheduler
          - llm-d-routing-sidecar
          - llama-stack-k8s-operator
          # Add all valid components here
      release_branch:
        description: 'Target Release Branch'
        required: true
        type: string
      version:
        description: 'New version'
        required: true
        type: string

jobs:
  update-tekton-pipelines-and-create-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: Checkout OKC repository
        uses: actions/checkout@v4
        with:
          path: okc-repo

      - name: Generate github-app token
        id: app-token
        uses: getsentry/action-github-app-token@v2
        with:
          app_id: ${{ secrets.ODH_DEVOPS_APP_ID }}
          private_key: ${{ secrets.ODH_DEVOPS_APP_PRIVATE_KEY }}

      - name: Set environment variables
        run: |
          echo "REPOSITORY=opendatahub-io/${{ inputs.component }}" >> $GITHUB_ENV
          echo "OKC_FOLDER=${{ inputs.component }}" >> $GITHUB_ENV

      - name: Prepare Tekton files
        run: |
          repo_folder="okc-repo/pipelines/${OKC_FOLDER}"
          echo "Using pipeline path: $repo_folder"

          if [ ! -d "$repo_folder" ]; then
            echo "ERROR: $repo_folder does not exist!"
            exit 1
          fi

          mkdir -p extracted/.tekton
          find "$repo_folder" -type f -name "*push.yaml" -exec cp {} extracted/.tekton/ \;

          if [ -z "$(ls -A extracted/.tekton)" ]; then
            echo "ERROR: No *push.yaml files found in $repo_folder"
            exit 1
          fi

          find extracted/.tekton/ -type f -name "*.yaml" | while read file; do
            # Update the output-image version
            sed -i -E '/name: output-image/{n; s|(value: .+:)[^[:space:]]+|\1'"${{ inputs.version }}"'|}' "$file"
            # Update CEL expression containing $$TARGET_BRANCH$$ across lines
            perl -0777 -i -pe "s#(target_branch\s*==\s*)([\"']?)\\\$\\\$TARGET_BRANCH\\\$\\\$([\"']?)#\1\"${{ inputs.release_branch }}\"#g" "$file"
          done

      - name: Prepare GitHub workflow files (if applicable)
        run: |
          src_dir="okc-repo/workflows/${{ inputs.component }}"
          dest_dir="extracted/.github/workflows"
          mkdir -p "$dest_dir"
          
          if [ -d "$src_dir" ]; then
            echo "Copying workflow files from $src_dir to $dest_dir"
            find "$src_dir" -type f -name "*.yaml" -exec cp {} "$dest_dir/" \;
      
            echo "Updating $$TARGET_BRANCH$$ to ${{ inputs.release_branch }} in GitHub workflow files"
            find "$dest_dir" -type f -name "*.yaml" | while read file; do
            # Replace $$TARGET_BRANCH$$ with the actual release branch name
            perl -0777 -i -pe 's/\$\$TARGET_BRANCH\$\$/'"${{ inputs.release_branch }}"'/g' "$file"
          done
          else
            echo "No workflows directory found for component '${{ inputs.component }}'. Skipping."
          fi

      - name: Clone and push Tekton changes
        run: |
          git clone https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${REPOSITORY} repo-workspace
          cd repo-workspace
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin ${{ inputs.release_branch }}
          git checkout -B ${{ inputs.release_branch }} origin/${{ inputs.release_branch }}
      
          #branch_name="appstudio-${{ inputs.component }}-konflux-replicator"
          #branch_name="appstudio-${{ inputs.component }}-konflux-replicator-${{ inputs.version }}"
          branch_name="appstudio-${{ inputs.component }}-konflux-replicator-${{ inputs.version }}-$(date +%s)"

          git checkout -B "$branch_name" ${{ inputs.release_branch }}
      
          # Copy .tekton files
          mkdir -p .tekton
          rsync -av --delete ../extracted/.tekton/ .tekton/
          git add -f .tekton
      
          # Conditionally copy workflows if available
          workflow_src="../extracted/.github/workflows"
          workflow_dest=".github/workflows"
      
          if [ -d "$workflow_src" ]; then
            echo "Copying workflow files from $workflow_src to $workflow_dest"
            mkdir -p "$workflow_dest"
            rsync -av "$workflow_src/" "$workflow_dest/"
            git add -f "$workflow_dest"
          else
            echo "No workflow files found for component '${{ inputs.component }}'. Skipping workflow update."
          fi
      
          # Commit if there are changes
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "commit=false" >> $GITHUB_ENV
            exit 0
          fi
      
          git commit -m "Update Tekton output-image tags to version ${{ inputs.version }}"
          git push --set-upstream origin "$branch_name"
          echo "commit=true" >> $GITHUB_ENV


      - name: Create Pull Request
        if: env.commit == 'true'
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          gh pr create \
            --repo "${REPOSITORY}" \
            --base "${{ inputs.release_branch }}" \
            --head "appstudio-${{ inputs.component }}-konflux-replicator-${{ inputs.version }}-$(date +%s)" \
            --title "Update Tekton files to version ${{ inputs.version }}" \
            --body "This PR updates the \`output-image\` tags and CEL expressions in \`.tekton/\` to version \`${{ inputs.version }}\` and branch \`${{ inputs.release_branch }}\`."
